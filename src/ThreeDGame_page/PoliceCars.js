/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, Instances, Instance } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

const STARTZ = -1150;

const createData = (startZ) => {
  let policeCarsData = [];
  for (let i = 0; i < 12; i++) {
    let obj = {};
    obj["x"] = [-16, 16][Math.round(Math.random())];
    obj["y"] = -2;
    obj["z"] = startZ;
    startZ += 100;
    policeCarsData.push(obj);
  }
  return policeCarsData;
};

const policeCarsData = createData(STARTZ);

export default function PoliceCars({ speed }) {
  const { nodes, materials } = useGLTF("/game/policeCar.glb");

  return (
    <Instances
      geometry={nodes.Police_Car.geometry}
      material={materials.Mat}
      limit={15}
    >
      {policeCarsData.map((pos, i) => (
        <PoliceCar key={i} position={[pos.x, pos.y, pos.z]} speed={speed} />
      ))}
    </Instances>
  );
}

function PoliceCar({ speed, ...props }) {
  const ref = useRef();
  useFrame((state) => {
    if (ref.current.position.z >= 50) {
      ref.current.position.z = STARTZ;
      ref.current.position.x = [-16, 16][Math.round(Math.random())];
    } else {
      ref.current.position.z += speed;
    }
  });
  return (
    // <group {...props}>
    <Instance ref={ref} scale={[0.3, 0.3, 0.3]} {...props} />
    // </group>
  );
}
useGLTF.preload("/game/policeCar.glb");
